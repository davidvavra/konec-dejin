// 
// Actions 
//

path /actions {
  read() { isSwiss() }

  path /{round_id} {
    index() {["delegate", "delegation"]}
    
    read() { isSwiss() || (query.orderByChild == "delegate" && query.equalTo == auth.uid) || (query.orderByChild == "delegation" && query.equalTo == prior(root).delegateRounds[auth.uid][round_id].delegation) }

    write() { isSwiss() }

    path /{action_id} is Action {
      read() { isSameDelegation(this.delegation, round_id)}
      write() { isSwiss() || (isDelete(this) && isSameDelegate(prior(this).delegate)) || (!isDelete(this) && isSameDelegate(this.delegate)) }
    }
  }
}

type Action {
  delegate: Id,
  delegation: Id,
  description: Description | Null,
  df: Number | Null,
  keyword: Keyword | Null,
  title: Description | Null,
  identifier: Description | Null,
  targetCountry: Emoji | Null,
  result: Description | Null,
  type: ActionType,
  visibility: ActionVisibility
}

type Description extends String {
    validate() { hasMaxLength(this, 5000) }
}

type Keyword extends String {
    validate() { hasMaxLength(this, 200) }
}

type ActionType extends String {
    validate() { this == "mission" || this == "unit" || this == "other" }
}

type ActionVisibility extends String {
    validate() { this == "public" || this == "covert" || this == "private" }
}

//
// Delegate rounds
//

path /delegateRounds {
  read() { isSignedIn() }
  write() { isSwiss() }

  path /{delegate_id}/{round_id}/markedAsSent is Boolean {
    write() { isSameDelegate(delegate_id) }
  }
}

//
// Delegates
//

path /delegates {
    read() { isSwiss() }
    path /{delegate_id} {
      write() { isSwiss() }
      index() {"password"}

      path /name {
        read() { isSignedIn() }
      }
      path /fremen {
        read() { isSignedIn() }
      }
    }
}

//
// Delegations
//

path /delegations {
  read() { isSignedIn() }

  path /{delegation_id} {
    write() { isSwiss() }
  }
}

//
// Projects
//

path /projects {
    index() {["delegate", "delegation", "type", "enabled"]}
    
    read() { isSignedIn() }

    path /{project_id} {
      read() { isSignedIn() }
      write() { isSwiss() }
    }
}

//
// Rounds
//

path /rounds {
  read() { isSignedIn() }

  path /{round_id} {
    write() { isSwiss() }
  }
}

// 
// Landsraad
//

path /landsraad/currentQuestion {
  read() { isSignedIn() }
  write() { isSwiss() }
}

path /landsraad/votingRights {
  index() {["controlledBy"]}
  read() { isSignedIn() }
  write() { isSwiss() }  
}

path /landsraad/questions {
  read() { isSignedIn() }
  write() { isSwiss() }
}

path /landsraad/answers {
  read() { isSignedIn() }
  write() { isSwiss() }
}

path /landsraad/votes {
  read() { isSwiss() }
  path /{question_id}/{voting_right_id} {
    delete() { isControllingVotingRight(voting_right_id) }
  }
  path /{question_id}/{voting_right_id}/{answer_id} is Number {
    write() { isControllingVotingRight(voting_right_id) }
  }
}

path /landsraad/votingConfig {
  read() { isSignedIn() }
  write() { isSwiss() }
}

isControllingVotingRight(voting_right_id) {
  auth.uid == prior(root).landsraad.votingRights[voting_right_id].controlledBy
}

// BV

path /bvRounds {

  read() { isSwiss() }

  path /{round_id}/{delegate_id} {
    read() { isSameDelegate(delegate_id) }
    write() { isSwiss() }
  }  
}

// Units

path /units {
    index() {["delegate", "type", "state", "state", "visibility" ]}
    
    read() { isSignedIn() }

    path /{unit_id} {
      read() { isSignedIn() }
      write() { isSwiss() }
    }
}

//
// Common
//

type Id extends String {
    validate() { hasMaxLength(this, 50) }
}

type Emoji extends String {
    validate() { hasMaxLength(this, 50) }
}

isSwiss() {
  auth.uid == "swiss"
}

hasMaxLength(text, length) {
    text.length <= length
}

isSignedIn() {
    auth != null
}

isSameDelegate(delegate_id) {
  isSwiss() || delegate_id == auth.uid
}

isSameDelegation(delegation_id, round_id) {
  isSwiss() || delegation_id == prior(root).delegateRounds[auth.uid][round_id].delegation
}

isDelete(value) {
    prior(value) != null && value == null
}